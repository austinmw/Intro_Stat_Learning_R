lda.pred=predict(lda.fit,biopsy,dimen=!train)
#lda.pred$class[1:10]
mean(lda.pred$class==class[!train])
dim(biopsy)
names(biopsy)
class[0:5]
train=1:600
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
lda.pred$class[1:5]
mean(lda.pred$class==class[!train])
dim(biopsy)
names(biopsy)
class[0:5]
train=1:600
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
lda.pred$class[1:5]
#mean(lda.pred$class==class[!train])
class[!train]
dim(biopsy)
names(biopsy)
class[0:5]
train=1:600
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
#lda.pred$class[1:5]
#mean(lda.pred$class==class[!train])
class[!train]
dim(biopsy)
names(biopsy)
class[0:5]
train=1:600
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
#lda.pred$class[1:5]
#mean(lda.pred$class==class[!train])
class[!train]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
lda.pred$class[1:5]
#mean(lda.pred$class==class[!train])
class[!train]
#mean(lda.pred$class==class[!train])
class[!train,]
#mean(lda.pred$class==class[!train])
class
#class[!train]
#mean(lda.pred$class==class[!train])
class[train]
#class[!train]
#mean(lda.pred$class==class[!train])
class[!train]
#class[!train]
#mean(lda.pred$class==class[!train])
class[train]
#class[!train]
#mean(lda.pred$class==class[!train])
dim(class[train])
#class[!train]
#mean(lda.pred$class==class[!train])
dim(class)
#class[!train]
#mean(lda.pred$class==class[!train])
dim(class)
#class[!train]
#mean(lda.pred$class==class[!train])
class.size
#mean(lda.pred$class==class[!train])
dim(class)
#class[!train]
#mean(lda.pred$class==class[!train])
dim(class)
#class[!train]
#mean(lda.pred$class==class[!train])
class
#class[!train]
#mean(lda.pred$class==class[!train])
class[1]
#class[!train]
#mean(lda.pred$class==class[!train])
class[2]
#class[!train]
#mean(lda.pred$class==class[!train])
class[:5]
#mean(lda.pred$class==class[!train])
class[1:5]
#class[!train]
#mean(lda.pred$class==class[!train])
class[!1]
#class[!train]
#mean(lda.pred$class==class[!train])
dim(biopsy)
class[]
#class[!train]
#mean(lda.pred$class==class[!train])
dim(biopsy)[1]
class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test
class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
library(MASS)
attach(biopsy)
dim(biopsy)
names(biopsy)
class[0:5]
train=1:600
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
lda.pred$class[1:5]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
dim(test)
class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
dim(test)
#class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test[:5]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test[1:5]
#class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test[680:699]
#class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test[680:700]
#class[]
#class[!train]
#mean(lda.pred$class==class[!train])
test = rep(1,dim(biopsy)[1])
test
#class[]
#class[!train]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=!test)
dim(biopsy)
names(biopsy)
class[0:5]
test = rep(0,dim(biopsy)[1])
test[1:100]=1
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=!test)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=!train)
lda.pred$class[1:5]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=!test)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=test)
lda.pred$class[1:5]
mean(lda.pred$class==class[test])
#class[]
#class[!train]
mean(lda.pred$class==class[test])
#class[]
#class[!train]
mean(lda.pred$class==class[test])
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
class[test]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
class[1:100]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
#class[1:10]
test
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
class[test]
#test
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
test
class[test]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
test
class[!test]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
test
class[test]
#class[]
#class[!train]
dim(biopsy)
names(biopsy)
class[0:10]
test = rep(0,dim(biopsy)[1])
test[1:100]=1
#mean(lda.pred$class==class[test])
test
class[test[1:10]]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
test
class[1:10]
#class[]
#class[!train]
#mean(lda.pred$class==class[test])
test
class[1:100]
#class[]
#class[!train]
mean(lda.pred$class==class[1:100])
#test
#class[1:100]
#class[]
#class[!train]
mean(lda.pred$class==class[1:100])
dim(lda.pred$class)
#test
#class[1:100]
#class[]
#class[!train]
mean(lda.pred$class==class[1:100])
dim(lda.pred$class)
#test
#class[1:100]
#class[]
#class[!train]
mean(lda.pred$class==class[1:100])
lda.pred$class
#test
#class[1:100]
#class[]
#class[!train]
dim(biopsy)
names(biopsy)
class[0:10]
train = 1:600
test = 600:dim(biopsy)[1]
train
dim(biopsy)
names(biopsy)
class[0:10]
train = 1:600
test = 600:dim(biopsy)[1]
test
dim(biopsy)
names(biopsy)
class[0:10]
train = 1:600
test = 601:dim(biopsy)[1]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy,dimen=test)
lda.pred$class[1:5]
#mean(lda.pred$class==class[1:100])
lda.pred$class
#test
#class[1:100]
#class[]
#class[!train]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy,subset=train)
lda.fit
lda.pred=predict(lda.fit,biopsy[test])
dim(biopsy)
names(biopsy)
class[0:10]
train = 1:600
test = 601:dim(biopsy)[1]
class[0:3]
train = 1:600
test = 601:dim(biopsy)[1]
class[0:3]
biopsy.train=biopsy[1:600,]
biopsy.test=biopsy[601:699,]
class[0:3]
biopsy.train=biopsy[1:600,]
biopsy.test=biopsy[601:699,]
lda.fit=lda(class~V1+V2+V3+V4+V5,data=biopsy.train)
lda.fit
lda.pred=predict(lda.fit,biopsy.test)
lda.class = lda.pred$class
#mean(lda.pred$class==class[1:100])
lda.class
#test
#class[1:100]
#class[]
#class[!train]
#mean(lda.pred$class==class[1:100])
mean(lda.class==biopsy.test.class)
#mean(lda.pred$class==class[1:100])
biopsy.test$class)
#mean(lda.pred$class==class[1:100])
biopsy.test$class)
#mean(lda.pred$class==class[1:100])
biopsy.test$class
#test
#class[1:100]
#class[]
#class[!train]
#mean(lda.pred$class==class[1:100])
lda.class==biopsy.test$class
#test
#class[1:100]
#class[]
#class[!train]
mean(lda.class==biopsy.test$class)
lda.class
biopsy.test$class
lda.class==biopsy.test$class
mean(lda.class==biopsy.test$class)
#lda.class
#biopsy.test$class
library(ISLR)
set.seed(1)
train=sample(392,196)
?sample
sample?
sample?
?sample
library(ISLR)
set.seed(1)
train=sample(392,196)
#?sample
lm.fit=lm(mpg~horsepower,data=Auto,subset=train)
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
?sample
?sample()
?sample
?sample
?sample
?sample
set.seed(2)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,subset=train)
set.seed(2)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,subset=train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
glm.fit(glm(mpg~horsepower,data=Auto))
glm.fit=glm(mpg~horsepower,data=Auto)
coef(glm.fit)
glm.fit=glm(mpg~horsepower,data=Auto)
coef(glm.fit)
lm.fit=lm(mpg~horsepower,data=Auto)
coef(lm.fit)
library(boot)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
cv.error=rep(0,5)
cv.error
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error[i]=cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10=rep(0,10)
for (i in 1:10){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
cv.error.10
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/var(X)+var(Y)-2*cov(X,Y))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample((100,100,replace=T)))
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T)))
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T))
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T))
boot(Portfolio,alpha.fn,R=1000)
boot.fn=function(data,index)
return(coef(lm(mpg~horsepower,data=data,subset=index)))
boot.fn(Auto,1:392)
index
index
dim(Auto)
set.seed(1)
boot.fn(Auto,sample(392,392,replace=T))
boot.fn(Auto,sample(392,392,replace=T))
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower,data=Auto))$coef
boot.fn=function(data,index)
coefficients(lm(mpg~horsepower+I(horsepower^2),data=data,subset=index))
set.seed(1)
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower+I(horsepower^2),data=Auto))$coef
unlink('Lab5_cache', recursive = TRUE)
library(ISLR)
fix(Hitters)
library(ISLR)
fix(Hitters)
library(ISLR)
fix(Hitters)
library(ISLR)
fix(Hitters)
library(ISLR)
fix(Hitters)
fix(Hitters)
library(ISLR)
fix(Hitters)
fix(Hitters)
fix(Hitters)
#fix(Hitters)
ISLR::Hitters
fix(ISLR::Hitters)
fix(ISLR::Hitters)
attach(ISLR)
attach(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
#fix(ISLR::Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
#fix(ISLR::Hitters)
fix(Hitters)
library(ISLR)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
library(leaps)
#library(leaps)
install.packages(leaps)
#library(leaps)
install.packages(leaps)
#library(leaps)
install.packages(leaps)
#library(leaps)
install.packages("leaps")
library(leaps)
library(leaps)
library("leaps")
library(leaps)
library(leaps)
library(leaps)
install.packages("leaps")
install.packages("leaps")
library("caret", lib.loc="~/anaconda3/lib/R/library")
library("codetools", lib.loc="~/anaconda3/lib/R/library")
library("data.table", lib.loc="~/anaconda3/lib/R/library")
install.packages("leaps")
install.packages(c("data.table", "glue", "lazyeval", "lubridate", "pryr", "purrr", "tidyr"))
library("ggplot2", lib.loc="~/anaconda3/lib/R/library")
library("ISLR", lib.loc="~/anaconda3/lib/R/library")
library("MASS", lib.loc="~/anaconda3/lib/R/library")
library("lattice", lib.loc="~/anaconda3/lib/R/library")
library("pkgconfig", lib.loc="~/anaconda3/lib/R/library")
install.packages(c("data.table", "glue", "lazyeval", "lubridate", "pryr", "purrr", "tidyr"))
install.packages("leaps")
install.packages("leap", dependencies = TRUE)
install.packages("leaps", dependencies = TRUE)
install.packages("leaps", dependencies = TRUE)
install.packages("leaps", dependencies = TRUE)
install.packages("leaps", dependencies = TRUE)
install.packages("leaps", dependencies = TRUE)
install.packages("leaps")
install.packages(c("data.table", "glue", "lazyeval", "lubridate", "pryr", "purrr", "tidyr"))
install.packages("leaps")
library(leaps)
